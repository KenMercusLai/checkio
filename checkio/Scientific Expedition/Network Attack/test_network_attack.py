import unittest

from network_attack import capture


class Tests(unittest.TestCase):
    TESTS = {
        "Basics": [
            {
                "input": [[0, 1, 0, 1, 0, 1],
                          [1, 8, 1, 0, 0, 0],
                          [0, 1, 2, 0, 0, 1],
                          [1, 0, 0, 1, 1, 0],
                          [0, 0, 0, 1, 3, 1],
                          [1, 0, 1, 0, 1, 2]],
                "answer": 8,
                "explanation": {0: 0, 1: 0, 2: 2, 3: 0, 4: 1, 5: 0},
            },
            {
                "input": [[0, 1, 0, 1, 0, 1],
                          [1, 1, 1, 0, 0, 0],
                          [0, 1, 2, 0, 0, 1],
                          [1, 0, 0, 1, 1, 0],
                          [0, 0, 0, 1, 3, 1],
                          [1, 0, 1, 0, 1, 2]],
                "answer": 4,
                "explanation": {0: 0, 1: 0, 2: 1, 3: 0, 4: 1, 5: 0},
            },
            {
                "input": [[0, 1, 1],
                          [1, 9, 1],
                          [1, 1, 9]],
                "answer": 9,
                "explanation": {0: 0, 1: 0, 2: 0},
            },
        ],
        "Edge": [
            {
                "input": [[0, 1, 1],
                          [1, 1, 1],
                          [1, 1, 1]],
                "answer": 1,
                "explanation": {0: 0, 1: 0, 2: 0},
            },
            {
                "input": [[0, 1, 0],
                          [1, 9, 1],
                          [0, 1, 9]],
                "answer": 18,
                "explanation": {0: 0, 1: 0, 2: 9},
            },
            {
                "input": [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                          [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                          [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                          [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                          [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                          [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                          [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                          [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                          [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                          [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]],
                "answer": 1,
                "explanation": {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0},
            },
            {
                "input": [[0, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                          [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],
                          [1, 1, 2, 1, 1, 1, 1, 1, 1, 1],
                          [1, 1, 1, 3, 1, 1, 1, 1, 1, 1],
                          [1, 1, 1, 1, 4, 1, 1, 1, 1, 1],
                          [1, 1, 1, 1, 1, 5, 1, 1, 1, 1],
                          [1, 1, 1, 1, 1, 1, 6, 1, 1, 1],
                          [1, 1, 1, 1, 1, 1, 1, 7, 1, 1],
                          [1, 1, 1, 1, 1, 1, 1, 1, 8, 1],
                          [1, 1, 1, 1, 1, 1, 1, 1, 1, 9]],
                "answer": 9,
                "explanation": {0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0, 7: 0, 8: 0, 9: 0},
            },
            {
                "input": [[0, 1, 0, 0, 0, 0, 0, 0, 0, 0],
                          [1, 1, 1, 0, 0, 0, 0, 0, 0, 0],
                          [0, 1, 2, 1, 0, 0, 0, 0, 0, 0],
                          [0, 0, 1, 3, 1, 0, 0, 0, 0, 0],
                          [0, 0, 0, 1, 4, 1, 0, 0, 0, 0],
                          [0, 0, 0, 0, 1, 5, 1, 0, 0, 0],
                          [0, 0, 0, 0, 0, 1, 6, 1, 0, 0],
                          [0, 0, 0, 0, 0, 0, 1, 7, 1, 0],
                          [0, 0, 0, 0, 0, 0, 0, 1, 8, 1],
                          [0, 0, 0, 0, 0, 0, 0, 0, 1, 9]],
                "answer": 45,
                "explanation": {0: 0, 1: 0, 2: 1, 3: 3, 4: 6, 5: 10, 6: 15, 7: 21, 8: 28, 9: 36},
            },
        ],
        "Extra": [
            {
                "input": [[0, 0, 0, 0, 1, 0, 0],
                          [0, 4, 0, 1, 1, 0, 1],
                          [0, 0, 1, 0, 0, 1, 1],
                          [0, 1, 0, 3, 0, 0, 1],
                          [1, 1, 0, 0, 1, 0, 0],
                          [0, 0, 1, 0, 0, 5, 1],
                          [0, 1, 1, 1, 0, 1, 2]],
                "answer": 12,
                "explanation": {0: 0, 1: 1, 2: 7, 3: 5, 4: 0, 5: 7, 6: 5},
            },
            {
                "input": [[0, 0, 1, 1, 0, 0, 0, 0, 0],
                          [0, 6, 0, 1, 0, 0, 0, 0, 1],
                          [1, 0, 9, 1, 0, 1, 0, 0, 0],
                          [1, 1, 1, 7, 1, 0, 0, 1, 0],
                          [0, 0, 0, 1, 2, 1, 1, 1, 0],
                          [0, 0, 1, 0, 1, 8, 1, 1, 0],
                          [0, 0, 0, 0, 1, 1, 9, 0, 1],
                          [0, 0, 0, 1, 1, 1, 0, 7, 0],
                          [0, 1, 0, 0, 0, 0, 1, 0, 9]],
                "answer": 22,
                "explanation": {0: 0, 1: 7, 2: 0, 3: 0, 4: 7, 5: 9, 6: 9, 7: 7, 8: 13},
            },
            {
                "input": [[0, 1, 0, 1, 0, 0, 0, 1],
                          [1, 2, 1, 1, 0, 1, 1, 1],
                          [0, 1, 6, 0, 1, 1, 0, 0],
                          [1, 1, 0, 1, 1, 1, 1, 0],
                          [0, 0, 1, 1, 1, 0, 0, 1],
                          [0, 1, 1, 1, 0, 9, 0, 0],
                          [0, 1, 0, 1, 0, 0, 6, 0],
                          [1, 1, 0, 0, 1, 0, 0, 6]],
                "answer": 10,
                "explanation": {0: 0, 1: 0, 2: 2, 3: 0, 4: 1, 5: 1, 6: 1, 7: 0},
            },
            {
                "input": [[0, 0, 1, 0, 0, 0, 0, 1],
                          [0, 5, 1, 0, 1, 1, 0, 0],
                          [1, 1, 8, 0, 1, 0, 1, 1],
                          [0, 0, 0, 6, 1, 0, 1, 1],
                          [0, 1, 1, 1, 2, 0, 0, 0],
                          [0, 1, 0, 0, 0, 5, 1, 0],
                          [0, 0, 1, 1, 0, 1, 5, 0],
                          [1, 0, 1, 1, 0, 0, 0, 4]],
                "answer": 18,
                "explanation": {0: 0, 1: 8, 2: 0, 3: 4, 4: 8, 5: 13, 6: 8, 7: 0},
            },
            {
                "input": [[0, 1, 1, 1],
                          [1, 9, 1, 0],
                          [1, 1, 8, 0],
                          [1, 0, 0, 4]],
                "answer": 9,
                "explanation": {0: 0, 1: 0, 2: 0, 3: 0},
            },
            {
                "input": [[0, 1, 0, 1, 0, 0],
                          [1, 5, 1, 1, 0, 1],
                          [0, 1, 4, 1, 1, 1],
                          [1, 1, 1, 3, 1, 1],
                          [0, 0, 1, 1, 9, 0],
                          [0, 1, 1, 1, 0, 1]],
                "answer": 12,
                "explanation": {0: 0, 1: 0, 2: 3, 3: 0, 4: 3, 5: 3},
            },
            {
                "input": [[0, 1, 1, 0, 0, 1],
                          [1, 6, 1, 0, 1, 1],
                          [1, 1, 3, 0, 1, 0],
                          [0, 0, 0, 9, 1, 0],
                          [0, 1, 1, 1, 4, 0],
                          [1, 1, 0, 0, 0, 6]],
                "answer": 16,
                "explanation": {0: 0, 1: 0, 2: 0, 3: 7, 4: 3, 5: 0},
            },
        ]
    }

    def test_Basics(self):
        for i in self.TESTS['Basics']:
            assert capture(i['input']) == i['answer'], i['input']

    def test_Edge(self):
        for i in self.TESTS['Edge']:
            assert capture(i['input']) == i['answer'], i['input']

    def test_Extra(self):
        for i in self.TESTS['Extra']:
            assert capture(i['input']) == i['answer'], i['input']


if __name__ == "__main__":  # pragma: no cover
    unittest.main()
