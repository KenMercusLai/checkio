import unittest

from simple2048 import (
    adding,
    clockwise_rotate,
    counterclockwise_rotate,
    mirror,
    move2048,
    move_left,
    recursive_adding,
    remove_zeros,
)


class Tests(unittest.TestCase):
    WIN = [
        ['U', 'W', 'I', 'N'],
        ['U', 'W', 'I', 'N'],
        ['U', 'W', 'I', 'N'],
        ['U', 'W', 'I', 'N'],
    ]
    LOSE = [
        ['G', 'A', 'M', 'E'],
        ['O', 'V', 'E', 'R'],
        ['G', 'A', 'M', 'E'],
        ['O', 'V', 'E', 'R'],
    ]
    TEST_MATRIX = [[1, 2, 3, 4], [5, 6, 7, 8], [9, 10, 11, 12], [13, 14, 15, 16]]
    TESTS = {
        "Basics": [
            {
                "input": (
                    [[0, 2, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 2, 0, 0]],
                    'up',
                ),
                "answer": [[0, 4, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 2]],
            },
            {
                "input": (
                    [[4, 0, 0, 0], [0, 4, 0, 0], [0, 0, 0, 0], [0, 0, 8, 8]],
                    'right',
                ),
                "answer": [[0, 0, 0, 4], [0, 0, 0, 4], [0, 0, 0, 0], [0, 0, 2, 16]],
            },
            {
                "input": [
                    [[2, 0, 2, 2], [0, 4, 4, 4], [8, 8, 8, 16], [0, 0, 0, 0]],
                    'right',
                ],
                "answer": [[0, 0, 2, 4], [0, 0, 4, 8], [0, 8, 16, 16], [0, 0, 0, 2]],
            },
            {
                "input": (
                    [[256, 0, 256, 4], [16, 8, 8, 0], [32, 32, 32, 32], [4, 4, 2, 2]],
                    'right',
                ),
                "answer": [
                    [0, 0, 512, 4],
                    [0, 0, 16, 16],
                    [0, 0, 64, 64],
                    [0, 2, 8, 4],
                ],
            },
            {
                "input": (
                    [
                        [4, 4, 0, 0],
                        [0, 4, 1024, 0],
                        [0, 256, 0, 256],
                        [0, 1024, 1024, 8],
                    ],
                    'down',
                ),
                "answer": WIN,
            },
            {
                "input": (
                    [
                        [2, 4, 8, 16],
                        [32, 64, 128, 256],
                        [512, 1024, 2, 4],
                        [8, 16, 32, 64],
                    ],
                    'left',
                ),
                "answer": LOSE,
            },
        ],
        "Edge": [
            {
                "input": (
                    [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 2, 0]],
                    'right',
                ),
                "answer": [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 2, 4]],
            },
            {
                "input": (
                    [[0, 0, 0, 0], [0, 0, 0, 0], [2, 0, 0, 0], [0, 0, 2, 0]],
                    'right',
                ),
                "answer": [[0, 0, 0, 0], [0, 0, 0, 0], [0, 0, 0, 2], [0, 0, 2, 2]],
            },
            {
                "input": (
                    [
                        [2, 16, 32, 128],
                        [2, 16, 32, 128],
                        [4, 8, 64, 256],
                        [4, 8, 64, 256],
                    ],
                    'down',
                ),
                "answer": [
                    [0, 0, 0, 0],
                    [0, 0, 0, 2],
                    [4, 32, 64, 256],
                    [8, 16, 128, 512],
                ],
            },
            {
                "input": (
                    [
                        [2, 16, 32, 128],
                        [2, 16, 32, 128],
                        [4, 8, 64, 256],
                        [4, 8, 64, 256],
                    ],
                    'left',
                ),
                "answer": LOSE,
            },
            {
                "input": (
                    [
                        [1024, 1024, 1024, 1024],
                        [1024, 1024, 1024, 1024],
                        [1024, 1024, 1024, 1024],
                        [1024, 1024, 1024, 1024],
                    ],
                    'up',
                ),
                "answer": WIN,
            },
            {
                "input": (
                    [
                        [512, 512, 512, 512],
                        [512, 512, 512, 512],
                        [512, 512, 512, 512],
                        [512, 512, 512, 512],
                    ],
                    'left',
                ),
                "answer": [
                    [1024, 1024, 0, 0],
                    [1024, 1024, 0, 0],
                    [1024, 1024, 0, 0],
                    [1024, 1024, 0, 2],
                ],
            },
            {
                "input": (
                    [
                        [8, 32, 4, 128],
                        [8, 32, 4, 128],
                        [0, 32, 0, 256],
                        [8, 64, 4, 128],
                    ],
                    'down',
                ),
                "answer": [
                    [0, 0, 0, 0],
                    [0, 32, 2, 256],
                    [8, 64, 4, 256],
                    [16, 64, 8, 128],
                ],
            },
            {
                "input": (
                    [
                        [8, 32, 4, 128],
                        [8, 32, 4, 128],
                        [0, 32, 0, 256],
                        [8, 64, 4, 128],
                    ],
                    'up',
                ),
                "answer": [
                    [16, 64, 8, 256],
                    [8, 32, 4, 256],
                    [0, 64, 0, 128],
                    [0, 0, 0, 2],
                ],
            },
        ],
        "Extra": [
            {
                "input": (
                    [
                        [32, 512, 1024, 256],
                        [64, 1024, 0, 256],
                        [512, 256, 32, 8],
                        [1024, 0, 1024, 0],
                    ],
                    'down',
                ),
                "answer": [
                    [32, 0, 0, 0],
                    [64, 512, 1024, 2],
                    [512, 1024, 32, 512],
                    [1024, 256, 1024, 8],
                ],
            },
            {
                "input": (
                    [
                        [32, 256, 512, 1024],
                        [64, 16, 128, 1024],
                        [128, 0, 1024, 16],
                        [1024, 64, 256, 16],
                    ],
                    'up',
                ),
                "answer": WIN,
            },
            {
                "input": (
                    [
                        [64, 1024, 256, 8],
                        [0, 2, 128, 256],
                        [64, 512, 8, 0],
                        [32, 1024, 128, 16],
                    ],
                    'left',
                ),
                "answer": [
                    [64, 1024, 256, 8],
                    [2, 128, 256, 0],
                    [64, 512, 8, 2],
                    [32, 1024, 128, 16],
                ],
            },
            {
                "input": (
                    [
                        [1024, 64, 4, 8],
                        [16, 32, 0, 4],
                        [32, 128, 256, 1024],
                        [128, 2, 32, 1024],
                    ],
                    'up',
                ),
                "answer": WIN,
            },
            {
                "input": (
                    [
                        [2, 0, 16, 2],
                        [1024, 32, 128, 512],
                        [128, 256, 1024, 16],
                        [16, 1024, 32, 32],
                    ],
                    'right',
                ),
                "answer": [
                    [0, 2, 16, 2],
                    [1024, 32, 128, 512],
                    [128, 256, 1024, 16],
                    [2, 16, 1024, 64],
                ],
            },
            {
                "input": (
                    [
                        [64, 1024, 128, 2],
                        [0, 64, 512, 512],
                        [128, 128, 8, 16],
                        [64, 512, 4, 16],
                    ],
                    'left',
                ),
                "answer": [
                    [64, 1024, 128, 2],
                    [64, 1024, 0, 0],
                    [256, 8, 16, 2],
                    [64, 512, 4, 16],
                ],
            },
            {
                "input": (
                    [
                        [0, 8, 1024, 512],
                        [2, 128, 8, 512],
                        [256, 64, 16, 256],
                        [4, 2, 8, 64],
                    ],
                    'up',
                ),
                "answer": [
                    [2, 8, 1024, 1024],
                    [256, 128, 8, 256],
                    [4, 64, 16, 64],
                    [0, 2, 8, 2],
                ],
            },
            {
                "input": (
                    [
                        [32, 64, 16, 128],
                        [8, 8, 0, 256],
                        [4, 0, 2, 2],
                        [256, 0, 1024, 32],
                    ],
                    'right',
                ),
                "answer": [
                    [32, 64, 16, 128],
                    [0, 0, 16, 256],
                    [0, 0, 4, 4],
                    [2, 256, 1024, 32],
                ],
            },
            {
                "input": (
                    [
                        [4, 1024, 256, 64],
                        [4, 0, 32, 2],
                        [256, 256, 2, 1024],
                        [64, 16, 128, 32],
                    ],
                    'right',
                ),
                "answer": [
                    [4, 1024, 256, 64],
                    [0, 4, 32, 2],
                    [2, 512, 2, 1024],
                    [64, 16, 128, 32],
                ],
            },
            {
                "input": (
                    [
                        [0, 16, 2, 1024],
                        [256, 256, 64, 0],
                        [1024, 64, 2, 16],
                        [1024, 512, 4, 1024],
                    ],
                    'down',
                ),
                "answer": WIN,
            },
        ],
    }

    def test_mirror(self):
        assert mirror(self.TEST_MATRIX) == [
            [4, 3, 2, 1],
            [8, 7, 6, 5],
            [12, 11, 10, 9],
            [16, 15, 14, 13],
        ]

    def test_clockwise_rotate(self):
        assert clockwise_rotate(self.TEST_MATRIX) == [
            [13, 9, 5, 1],
            [14, 10, 6, 2],
            [15, 11, 7, 3],
            [16, 12, 8, 4],
        ]

    def test_counterclockwise_rotate(self):
        assert counterclockwise_rotate(self.TEST_MATRIX) == [
            [4, 8, 12, 16],
            [3, 7, 11, 15],
            [2, 6, 10, 14],
            [1, 5, 9, 13],
        ]

    def test_remove_zeros(self):
        assert remove_zeros([0, 2, 0, 0]) == [2]
        assert remove_zeros([0, 0, 0, 0]) == []
        assert remove_zeros([256, 0, 256, 4]) == [256, 256, 4]

    def test_adding(self):
        assert adding([2]) == ([2], [])
        assert adding([256, 256, 4]) == ([512], [4])
        assert adding([16, 8, 8]) == ([16], [8, 8])
        assert adding([32, 32, 32, 32]) == ([64], [32, 32])

    def test_recursive_adding(self):
        assert recursive_adding([2]) == [2]
        assert recursive_adding([256, 256, 4]) == [512, 4]
        assert recursive_adding([16, 8, 8]) == [16, 16]
        assert recursive_adding([32, 32, 32, 32]) == [64, 64]

    def test_move_left(self):
        assert move_left([[0, 2, 0, 0], [0, 0, 0, 0], [0, 0, 0, 0], [0, 2, 0, 0]]) == [
            [2, 0, 0, 0],
            [0, 0, 0, 0],
            [0, 0, 0, 0],
            [2, 0, 0, 0],
        ]
        assert move_left([[4, 0, 0, 0], [0, 4, 0, 0], [0, 0, 0, 0], [0, 0, 8, 8]]) == [
            [4, 0, 0, 0],
            [4, 0, 0, 0],
            [0, 0, 0, 0],
            [16, 0, 0, 0],
        ]
        assert move_left([[2, 0, 2, 2], [0, 4, 4, 4], [8, 8, 8, 16], [0, 0, 0, 0]]) == [
            [4, 2, 0, 0],
            [8, 4, 0, 0],
            [16, 8, 16, 0],
            [0, 0, 0, 0],
        ]
        assert move_left(
            [[256, 0, 256, 4], [16, 8, 8, 0], [32, 32, 32, 32], [4, 4, 2, 2]]
        ) == [[512, 4, 0, 0], [16, 16, 0, 0], [64, 64, 0, 0], [8, 4, 0, 0]]

    def test_Basics(self):
        for i in self.TESTS['Basics']:
            assert move2048(*i['input']) == i['answer']

    def test_Edge(self):
        for i in self.TESTS['Edge']:
            assert move2048(*i['input']) == i['answer']

    def test_Extra(self):
        for i in self.TESTS['Extra']:
            assert move2048(*i['input']) == i['answer']


if __name__ == "__main__":  # pragma: no cover
    unittest.main()
